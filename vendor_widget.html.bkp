<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vendor Survey - Lead Router Pro</title>
    <style>
        /* Reset and Base Styles */
        #vendor-survey-widget * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        #vendor-survey-widget {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 900px;
            margin: 0 auto;
            padding: 0;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        /* Slide Container */
        .slide-container {
            background: white;
            margin: 0;
            padding: 0;
            min-height: 600px;
            position: relative;
        }

        /* Individual Slides */
        .form-slide {
            display: none;
            padding: 60px 50px 80px;
            min-height: 600px;
            position: relative;
        }

        .form-slide.active {
            display: block;
            animation: slideIn 0.5s ease-out;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateX(30px);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        /* Typography */
        .slide-title {
            color: #2c3e50;
            font-size: 36px;
            font-weight: 700;
            margin-bottom: 12px;
            line-height: 1.2;
        }

        .slide-subtitle {
            color: #7f8c8d;
            font-size: 18px;
            margin-bottom: 40px;
            font-weight: 400;
        }

        .section-title {
            color: #34495e;
            font-size: 24px;
            font-weight: 600;
            margin-bottom: 20px;
        }

        .section-description {
            color: #7f8c8d;
            font-size: 16px;
            margin-bottom: 30px;
            line-height: 1.5;
        }

        /* Form Elements */
        .form-group {
            margin-bottom: 30px;
        }

        .form-group label {
            display: block;
            font-weight: 600;
            margin-bottom: 8px;
            color: #2c3e50;
            font-size: 16px;
        }

        /* Input Field Sizing */
        .input-small {
            width: 200px;
        }

        .input-medium {
            width: 350px;
        }

        .input-large {
            width: 100%;
        }

        .input-url {
            width: 500px;
        }

        /* Boolean/Radio Field Container */
        .radio-group {
            display: flex;
            gap: 20px;
            align-items: center;
        }

        .radio-option {
            display: flex;
            align-items: center;
            gap: 8px;
            cursor: pointer;
            padding: 12px 20px;
            border: 2px solid #e1e8ed;
            border-radius: 12px;
            background: #f8f9fb;
            transition: all 0.3s ease;
        }

        .radio-option:hover {
            border-color: #667eea;
            background: #f0f3ff;
        }

        .radio-option.selected {
            border-color: #667eea;
            background: #667eea;
            color: white;
        }

        /* Standard Text Inputs */
        input[type="text"],
        input[type="email"],
        input[type="tel"],
        input[type="number"],
        input[type="url"],
        textarea,
        select {
            padding: 16px 20px;
            border: 2px solid #e1e8ed;
            border-radius: 12px;
            font-size: 16px;
            font-family: inherit;
            transition: all 0.3s ease;
            background-color: #f8f9fb;
        }

        input[type="text"]:focus,
        input[type="email"]:focus,
        input[type="tel"]:focus,
        input[type="number"]:focus,
        input[type="url"]:focus,
        textarea:focus,
        select:focus {
            outline: none;
            border-color: #667eea;
            background-color: white;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        #vendor-survey-widget input:focus,
        #vendor-survey-widget textarea:focus,
        #vendor-survey-widget select:focus {
            outline: none;
            border-color: #0066cc;
        }

        #vendor-survey-widget select[multiple] {
            padding: 8px;
            background-color: white;
            min-height: 200px;
        }

        #vendor-survey-widget select[multiple] option {
            padding: 4px 8px;
            cursor: pointer;
        }

        #vendor-survey-widget select[multiple] option:hover {
            background-color: #f0f8ff;
        }

        #vendor-survey-widget select[multiple] option:checked {
            background-color: #0066cc;
            color: white;
        }

        /* Coverage Type Layout */
        .coverage-type-container {
            display: flex;
            gap: 10px;
            align-items: flex-start;
        }

        .coverage-type-container select {
            flex: 1;
        }

        #county_state_selector {
            display: none;
        }

        /* Progress Bar */
        .progress-container {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            height: 6px;
            background: rgba(255,255,255,0.3);
            z-index: 1000;
        }

        .progress-bar {
            height: 100%;
            background: linear-gradient(90deg, #667eea, #764ba2);
            transition: width 0.6s ease;
            width: 0%;
        }

        .slide-progress {
            display: flex;
            justify-content: center;
            align-items: center;
            margin-bottom: 40px;
            gap: 10px;
        }

        .progress-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: #e1e8ed;
            transition: all 0.3s ease;
        }

        .progress-dot.active {
            background: #667eea;
            transform: scale(1.2);
        }

        .progress-dot.completed {
            background: #27ae60;
        }

        /* Navigation Buttons */
        .slide-navigation {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            padding: 30px 50px;
            background: linear-gradient(to top, rgba(0,0,0,0.05), transparent);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .nav-button {
            padding: 16px 32px;
            border: none;
            border-radius: 50px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        .nav-button.primary {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
        }

        .nav-button.primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.6);
        }

        .nav-button.secondary {
            background: transparent;
            color: #7f8c8d;
            border: 2px solid #e1e8ed;
        }

        .nav-button.secondary:hover {
            border-color: #667eea;
            color: #667eea;
        }

        .nav-button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none !important;
        }

        /* Category Cards */
        .categories-section {
            margin-bottom: 30px;
        }

        .category-card {
            background: white;
            border: 2px solid #e1e4e8;
            border-radius: 8px;
            margin-bottom: 12px;
            overflow: hidden;
            transition: all 0.3s ease;
        }

        .category-card.selected {
            border-color: #0066cc;
            box-shadow: 0 2px 8px rgba(0, 102, 204, 0.15);
        }

        .category-header {
            padding: 20px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: space-between;
            transition: background-color 0.3s ease;
        }

        .category-header:hover {
            background-color: #f6f8fa;
        }

        .category-info {
            flex: 1;
        }

        .category-checkbox {
            width: 24px;
            height: 24px;
            cursor: pointer;
            accent-color: #0066cc;
        }

        .service-count {
            font-size: 14px;
            color: #666;
            margin-top: 4px;
        }

        .expand-icon {
            width: 24px;
            height: 24px;
            margin-left: 16px;
            transition: transform 0.3s ease;
            color: #666;
        }

        .category-card.expanded .expand-icon {
            transform: rotate(180deg);
        }

        /* Services Panel */
        .services-panel {
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.3s ease;
            background: #f6f8fa;
        }

        .category-card.expanded .services-panel {
            max-height: 1000px;
        }

        .service-controls {
            padding: 16px 20px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            border-top: 1px solid #e1e4e8;
            background: #fff;
        }

        .control-buttons {
            display: flex;
            gap: 10px;
        }

        .btn-small {
            padding: 6px 12px;
            font-size: 14px;
            border: 1px solid #ddd;
            background: white;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .btn-small:hover {
            background: #f6f8fa;
            border-color: #0066cc;
            color: #0066cc;
        }

        .services-grid {
            padding: 20px;
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 12px;
        }

        .service-item {
            display: flex;
            align-items: center;
            padding: 8px;
            background: white;
            border-radius: 4px;
            transition: background-color 0.2s ease;
        }

        .service-item:hover {
            background-color: #f0f4f8;
        }

        .service-item input[type="checkbox"] {
            margin-right: 8px;
            cursor: pointer;
        }

        .service-item label {
            cursor: pointer;
            margin-bottom: 0;
            font-weight: 400;
        }

        /* Summary Section */
        .summary-section {
            background: #e8f4f8;
            border: 2px solid #b3d9e6;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .summary-title {
            font-size: 18px;
            font-weight: 600;
            color: #0066cc;
            margin-bottom: 10px;
        }

        .summary-content {
            display: flex;
            justify-content: space-around;
            text-align: center;
        }

        .summary-item {
            flex: 1;
        }

        .summary-number {
            font-size: 32px;
            font-weight: 700;
            color: #0066cc;
        }

        .summary-label {
            font-size: 14px;
            color: #666;
        }

        /* Submit Button */
        .submit-button {
            width: 100%;
            padding: 16px;
            font-size: 18px;
            font-weight: 600;
            color: white;
            background: linear-gradient(135deg, #0066cc, #0052a3);
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .submit-button:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 102, 204, 0.3);
        }

        .submit-button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        .submit-button.loading::after {
            content: '';
            position: absolute;
            width: 20px;
            height: 20px;
            margin: auto;
            top: 0;
            left: 0;
            bottom: 0;
            right: 0;
            border: 2px solid transparent;
            border-top-color: white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Messages */
        .message {
            padding: 12px 16px;
            border-radius: 6px;
            margin-bottom: 20px;
            display: none;
        }

        .message.success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .message.error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .message.show {
            display: block;
            animation: slideIn 0.3s ease;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Validation Errors */
        .field-error {
            color: #dc3545;
            font-size: 14px;
            margin-top: 5px;
        }

        .form-group.has-error input,
        .form-group.has-error textarea,
        .form-group.has-error select {
            border-color: #dc3545;
        }

        /* State Selection Styles */
        .state-selection-controls {
            padding: 12px 16px;
            background: #f6f8fa;
            border: 2px solid #ddd;
            border-bottom: none;
            border-radius: 6px 6px 0 0;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .state-selection-controls .btn-small {
            margin: 0;
        }

        .state-selection-controls .btn-small:hover {
            background: #0066cc;
            color: white;
            border-color: #0066cc;
        }

        .state-count-label {
            margin-left: auto;
            font-size: 14px;
            color: #666;
        }

        .state-checkbox-list {
            border: 2px solid #ddd;
            border-top: none;
            border-radius: 0 0 6px 6px;
            max-height: 300px;
            overflow-y: auto;
            background: white;
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 0;
        }

        .state-item {
            padding: 8px 12px;
            border-bottom: 1px solid #f0f0f0;
            border-right: 1px solid #f0f0f0;
            transition: background-color 0.2s ease;
        }

        .state-item:hover {
            background-color: #f6f8fa;
        }

        .state-item:has(input:checked) {
            background-color: #e8f4f8;
        }

        .state-item input[type="checkbox"] {
            margin-right: 8px;
            cursor: pointer;
            accent-color: #0066cc;
        }

        .state-item label {
            cursor: pointer;
            margin-bottom: 0;
            font-weight: 400;
            display: inline;
        }

        /* Help text */
        .help-text {
            margin-top: 8px;
            padding: 10px;
            background-color: #e8f4f8;
            border-radius: 4px;
            font-size: 14px;
            color: #0066cc;
        }
        
        /* Step Sections */
        .step-section {
            background: white;
            border: 2px solid #e1e4e8;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
        }
        
        .step-section h4 {
            color: #0066cc;
            font-size: 16px;
            font-weight: 600;
            margin-bottom: 15px;
        }
        
        .service-checkbox-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 10px;
            margin: 15px 0;
        }
        
        .service-checkbox-item {
            display: flex;
            align-items: center;
            padding: 8px 12px;
            background: #f8f9fa;
            border: 1px solid #e1e4e8;
            border-radius: 6px;
            transition: all 0.2s ease;
        }
        
        .service-checkbox-item:hover {
            background: #f0f8ff;
            border-color: #0066cc;
        }
        
        .service-checkbox-item input[type="checkbox"] {
            margin-right: 8px;
            cursor: pointer;
        }
        
        .service-checkbox-item label {
            cursor: pointer;
            margin-bottom: 0;
            font-weight: 400;
            font-size: 14px;
        }
        
        .category-checkbox-item {
            display: flex;
            align-items: center;
            padding: 12px 15px;
            background: #f8f9fa;
            border: 2px solid #e1e4e8;
            border-radius: 8px;
            margin-bottom: 10px;
            transition: all 0.2s ease;
            cursor: pointer;
        }
        
        .category-checkbox-item:hover {
            background: #f0f8ff;
            border-color: #0066cc;
        }
        
        .category-checkbox-item.selected {
            background: #e8f4f8;
            border-color: #0066cc;
        }
        
        .category-checkbox-item input[type="checkbox"] {
            margin-right: 12px;
            cursor: pointer;
        }
        
        .category-checkbox-item label {
            cursor: pointer;
            margin-bottom: 0;
            font-weight: 500;
        }

        /* Responsive Design */
        @media (max-width: 992px) {
            .state-checkbox-list {
                grid-template-columns: repeat(2, 1fr);
            }
        }
        
        @media (max-width: 768px) {
            #vendor-survey-widget {
                padding: 15px;
            }

            .services-grid {
                grid-template-columns: 1fr;
            }

            .summary-content {
                flex-direction: column;
                gap: 15px;
            }
            
            .coverage-type-container {
                flex-direction: column !important;
            }
            
            #county_state_selector {
                margin-top: 10px;
            }
            
            .state-checkbox-list {
                grid-template-columns: 1fr;
                max-height: 400px;
            }
        }
    </style>
</head>
<body>
    <div id="vendor-survey-widget">
        <!-- Top Progress Bar -->
        <div class="progress-container">
            <div class="progress-bar" id="progressBar"></div>
        </div>

        <!-- Messages -->
        <div class="message success" id="successMessage"></div>
        <div class="message error" id="errorMessage"></div>

        <div class="slide-container">
            <form id="vendorSurveyForm">
                <!-- Slide 1: Welcome & Basic Info -->
                <div class="form-slide active" id="slide-1">
                    <div class="slide-progress">
                        <div class="progress-dot active"></div>
                        <div class="progress-dot"></div>
                        <div class="progress-dot"></div>
                        <div class="progress-dot"></div>
                        <div class="progress-dot"></div>
                        <div class="progress-dot"></div>
                    </div>
                    
                    <h1 class="slide-title">Welcome! Let's get started</h1>
                    <p class="slide-subtitle">First, tell us about yourself and your company</p>
                    
                    <div class="form-group">
                        <label for="firstName">Your First Name *</label>
                        <input type="text" id="firstName" name="firstName" class="input-medium" required>
                        <span class="field-error"></span>
                    </div>

                    <div class="form-group">
                        <label for="lastName">Your Last Name *</label>
                        <input type="text" id="lastName" name="lastName" class="input-medium" required>
                        <span class="field-error"></span>
                    </div>

                    <div class="form-group">
                        <label for="vendor_company_name">Your Company Name *</label>
                        <input type="text" id="vendor_company_name" name="vendor_company_name" class="input-large" required>
                        <span class="field-error"></span>
                    </div>

                    <div class="slide-navigation">
                        <div></div>
                        <button type="button" class="nav-button primary" onclick="nextSlide(1)">
                            Continue →
                        </button>
                    </div>
                </div>

                <!-- Slide 2: Contact Information -->
                <div class="form-slide" id="slide-2">
                    <div class="slide-progress">
                        <div class="progress-dot completed"></div>
                        <div class="progress-dot active"></div>
                        <div class="progress-dot"></div>
                        <div class="progress-dot"></div>
                        <div class="progress-dot"></div>
                        <div class="progress-dot"></div>
                    </div>
                    
                    <h1 class="slide-title">How can we reach you?</h1>
                    <p class="slide-subtitle">Let's get your contact information</p>
                    
                    <div class="form-group">
                        <label for="email">Email Address *</label>
                        <input type="email" id="email" name="email" class="input-large" required>
                        <span class="field-error"></span>
                    </div>

                    <div class="form-group">
                        <label for="phone">Phone Number *</label>
                        <input type="tel" id="phone" name="phone" class="input-medium" required>
                        <span class="field-error"></span>
                    </div>

                    <div class="form-group">
                        <label for="website_url">Company Website</label>
                        <input type="url" id="website_url" name="website_url" class="input-url" placeholder="https://yourcompany.com">
                        <span class="field-error"></span>
                    </div>

                    <div class="form-group">
                        <label for="reviews__google_profile_url">Google Reviews / Profile URL</label>
                        <input type="url" id="reviews__google_profile_url" name="reviews__google_profile_url" class="input-url" placeholder="https://maps.google.com/your-business">
                        <span class="field-error"></span>
                    </div>

                    <div class="slide-navigation">
                        <button type="button" class="nav-button secondary" onclick="prevSlide(2)">
                            ← Back
                        </button>
                        <button type="button" class="nav-button primary" onclick="nextSlide(2)">
                            Continue →
                        </button>
                    </div>
                </div>

                <!-- Slide 3: Service Categories -->
                <div class="form-slide" id="slide-3">
                    <div class="slide-progress">
                        <div class="progress-dot completed"></div>
                        <div class="progress-dot completed"></div>
                        <div class="progress-dot active"></div>
                        <div class="progress-dot"></div>
                        <div class="progress-dot"></div>
                        <div class="progress-dot"></div>
                    </div>
                    
                    <h1 class="slide-title">What services do you provide?</h1>
                    <p class="slide-subtitle">Help us understand your expertise</p>
                    
                    <!-- Primary Category Selection -->
                    <div class="form-group">
                        <label for="primary_service_category">Your Primary Service Category *</label>
                        <select id="primary_service_category" name="primary_service_category" class="input-large" required>
                            <option value="">Select your main expertise</option>
                            <option value="Boat and Yacht Repair">Boat and Yacht Repair</option>
                            <option value="Boat Maintenance">Boat Maintenance</option>
                            <option value="Marine Systems">Marine Systems</option>
                            <option value="Engines and Generators">Engines and Generators</option>
                            <option value="Boat Towing">Boat Towing</option>
                            <option value="Boater Resources">Boater Resources</option>
                        </select>
                        <span class="field-error"></span>
                    </div>

                    <!-- Primary Services -->
                    <div id="step2-primary-services" style="display: none;">
                        <div class="form-group">
                            <label>Specific Services from Your Primary Category *</label>
                            <div id="primary-services-container">
                                <!-- Will be populated dynamically -->
                            </div>
                            <span class="field-error"></span>
                        </div>
                    </div>

                    <div class="slide-navigation">
                        <button type="button" class="nav-button secondary" onclick="prevSlide(3)">
                            ← Back
                        </button>
                        <button type="button" class="nav-button primary" onclick="nextSlide(3)" id="continueStep3">
                            Continue →
                        </button>
                    </div>
                </div>

                <!-- Slide 4: Additional Services -->
                <div class="form-slide" id="slide-4">
                    <div class="slide-progress">
                        <div class="progress-dot completed"></div>
                        <div class="progress-dot completed"></div>
                        <div class="progress-dot completed"></div>
                        <div class="progress-dot active"></div>
                        <div class="progress-dot"></div>
                        <div class="progress-dot"></div>
                    </div>
                    
                    <h1 class="slide-title">Any additional services?</h1>
                    <p class="slide-subtitle">Select up to 2 additional categories you serve (optional)</p>
                    
                    <!-- Additional Categories -->
                    <div id="step3-additional-categories">
                        <div class="form-group">
                            <label>Additional Service Categories (Optional)</label>
                            <div id="additional-categories-container">
                                <!-- Will be populated dynamically -->
                            </div>
                        </div>
                    </div>

                    <!-- Additional Services -->
                    <div id="step4-additional-services" style="display: none;">
                        <div class="form-group">
                            <label>Services from Additional Categories</label>
                            <div id="additional-services-container">
                                <!-- Will be populated dynamically -->
                            </div>
                        </div>
                    </div>

                    <div class="slide-navigation">
                        <button type="button" class="nav-button secondary" onclick="prevSlide(4)">
                            ← Back
                        </button>
                        <button type="button" class="nav-button primary" onclick="nextSlide(4)" id="continueStep4">
                            Continue →
                        </button>
                    </div>
                </div>

                <!-- Slide 5: Coverage Area -->
                <div class="form-slide" id="slide-5">
                    <div class="slide-progress">
                        <div class="progress-dot completed"></div>
                        <div class="progress-dot completed"></div>
                        <div class="progress-dot completed"></div>
                        <div class="progress-dot completed"></div>
                        <div class="progress-dot active"></div>
                        <div class="progress-dot"></div>
                    </div>
                    
                    <h1 class="slide-title">Where do you provide services?</h1>
                    <p class="slide-subtitle">Help customers find you in their area</p>
                    
                    <div class="form-group">
                        <label for="coverage_type">Coverage Type *</label>
                        <div class="coverage-type-container">
                        <select id="coverage_type" name="coverage_type" required>
                            <option value="">Select Coverage Type</option>
                            <option value="global">Global - Worldwide Service</option>
                            <option value="national">National - All United States</option>
                            <option value="state">State - Specific States</option>
                            <option value="county">County - Specific Counties</option>
                            <option value="zip">ZIP Codes - Specific Areas</option>
                        </select>
                        
                        <!-- State selector for county coverage (appears inline) -->
                        <select id="county_state_selector">
                            <option value="">Select State</option>
                            <option value="AL">Alabama</option>
                            <option value="AK">Alaska</option>
                            <option value="AZ">Arizona</option>
                            <option value="AR">Arkansas</option>
                            <option value="CA">California</option>
                            <option value="CO">Colorado</option>
                            <option value="CT">Connecticut</option>
                            <option value="DE">Delaware</option>
                            <option value="FL">Florida</option>
                            <option value="GA">Georgia</option>
                            <option value="HI">Hawaii</option>
                            <option value="ID">Idaho</option>
                            <option value="IL">Illinois</option>
                            <option value="IN">Indiana</option>
                            <option value="IA">Iowa</option>
                            <option value="KS">Kansas</option>
                            <option value="KY">Kentucky</option>
                            <option value="LA">Louisiana</option>
                            <option value="ME">Maine</option>
                            <option value="MD">Maryland</option>
                            <option value="MA">Massachusetts</option>
                            <option value="MI">Michigan</option>
                            <option value="MN">Minnesota</option>
                            <option value="MS">Mississippi</option>
                            <option value="MO">Missouri</option>
                            <option value="MT">Montana</option>
                            <option value="NE">Nebraska</option>
                            <option value="NV">Nevada</option>
                            <option value="NH">New Hampshire</option>
                            <option value="NJ">New Jersey</option>
                            <option value="NM">New Mexico</option>
                            <option value="NY">New York</option>
                            <option value="NC">North Carolina</option>
                            <option value="ND">North Dakota</option>
                            <option value="OH">Ohio</option>
                            <option value="OK">Oklahoma</option>
                            <option value="OR">Oregon</option>
                            <option value="PA">Pennsylvania</option>
                            <option value="RI">Rhode Island</option>
                            <option value="SC">South Carolina</option>
                            <option value="SD">South Dakota</option>
                            <option value="TN">Tennessee</option>
                            <option value="TX">Texas</option>
                            <option value="UT">Utah</option>
                            <option value="VT">Vermont</option>
                            <option value="VA">Virginia</option>
                            <option value="WA">Washington</option>
                            <option value="WV">West Virginia</option>
                            <option value="WI">Wisconsin</option>
                            <option value="WY">Wyoming</option>
                        </select>
                    </div>
                    <span class="field-error"></span>
                </div>

                <div class="form-group" id="coverageAreaGroup">
                    <label for="service_coverage_area" id="coverageAreaLabel">Service Coverage Area *</label>
                    
                    <!-- Default text input for Global/National -->
                    <input type="text" id="service_coverage_area" name="service_coverage_area" value="All" readonly style="display: none;">
                    
                    <!-- State selection with checkboxes -->
                    <div id="stateSelectionContainer" style="display: none;">
                        <div class="state-selection-controls">
                            <button type="button" class="btn-small" onclick="selectAllStates()">Select All</button>
                            <button type="button" class="btn-small" onclick="clearAllStates()">Clear All</button>
                            <span class="state-count-label">0 selected</span>
                        </div>
                        <div class="state-checkbox-list">
                            <div class="state-item"><input type="checkbox" id="state-AL" value="AL"><label for="state-AL">Alabama</label></div>
                            <div class="state-item"><input type="checkbox" id="state-AK" value="AK"><label for="state-AK">Alaska</label></div>
                            <div class="state-item"><input type="checkbox" id="state-AZ" value="AZ"><label for="state-AZ">Arizona</label></div>
                            <div class="state-item"><input type="checkbox" id="state-AR" value="AR"><label for="state-AR">Arkansas</label></div>
                            <div class="state-item"><input type="checkbox" id="state-CA" value="CA"><label for="state-CA">California</label></div>
                            <div class="state-item"><input type="checkbox" id="state-CO" value="CO"><label for="state-CO">Colorado</label></div>
                            <div class="state-item"><input type="checkbox" id="state-CT" value="CT"><label for="state-CT">Connecticut</label></div>
                            <div class="state-item"><input type="checkbox" id="state-DE" value="DE"><label for="state-DE">Delaware</label></div>
                            <div class="state-item"><input type="checkbox" id="state-FL" value="FL"><label for="state-FL">Florida</label></div>
                            <div class="state-item"><input type="checkbox" id="state-GA" value="GA"><label for="state-GA">Georgia</label></div>
                            <div class="state-item"><input type="checkbox" id="state-HI" value="HI"><label for="state-HI">Hawaii</label></div>
                            <div class="state-item"><input type="checkbox" id="state-ID" value="ID"><label for="state-ID">Idaho</label></div>
                            <div class="state-item"><input type="checkbox" id="state-IL" value="IL"><label for="state-IL">Illinois</label></div>
                            <div class="state-item"><input type="checkbox" id="state-IN" value="IN"><label for="state-IN">Indiana</label></div>
                            <div class="state-item"><input type="checkbox" id="state-IA" value="IA"><label for="state-IA">Iowa</label></div>
                            <div class="state-item"><input type="checkbox" id="state-KS" value="KS"><label for="state-KS">Kansas</label></div>
                            <div class="state-item"><input type="checkbox" id="state-KY" value="KY"><label for="state-KY">Kentucky</label></div>
                            <div class="state-item"><input type="checkbox" id="state-LA" value="LA"><label for="state-LA">Louisiana</label></div>
                            <div class="state-item"><input type="checkbox" id="state-ME" value="ME"><label for="state-ME">Maine</label></div>
                            <div class="state-item"><input type="checkbox" id="state-MD" value="MD"><label for="state-MD">Maryland</label></div>
                            <div class="state-item"><input type="checkbox" id="state-MA" value="MA"><label for="state-MA">Massachusetts</label></div>
                            <div class="state-item"><input type="checkbox" id="state-MI" value="MI"><label for="state-MI">Michigan</label></div>
                            <div class="state-item"><input type="checkbox" id="state-MN" value="MN"><label for="state-MN">Minnesota</label></div>
                            <div class="state-item"><input type="checkbox" id="state-MS" value="MS"><label for="state-MS">Mississippi</label></div>
                            <div class="state-item"><input type="checkbox" id="state-MO" value="MO"><label for="state-MO">Missouri</label></div>
                            <div class="state-item"><input type="checkbox" id="state-MT" value="MT"><label for="state-MT">Montana</label></div>
                            <div class="state-item"><input type="checkbox" id="state-NE" value="NE"><label for="state-NE">Nebraska</label></div>
                            <div class="state-item"><input type="checkbox" id="state-NV" value="NV"><label for="state-NV">Nevada</label></div>
                            <div class="state-item"><input type="checkbox" id="state-NH" value="NH"><label for="state-NH">New Hampshire</label></div>
                            <div class="state-item"><input type="checkbox" id="state-NJ" value="NJ"><label for="state-NJ">New Jersey</label></div>
                            <div class="state-item"><input type="checkbox" id="state-NM" value="NM"><label for="state-NM">New Mexico</label></div>
                            <div class="state-item"><input type="checkbox" id="state-NY" value="NY"><label for="state-NY">New York</label></div>
                            <div class="state-item"><input type="checkbox" id="state-NC" value="NC"><label for="state-NC">North Carolina</label></div>
                            <div class="state-item"><input type="checkbox" id="state-ND" value="ND"><label for="state-ND">North Dakota</label></div>
                            <div class="state-item"><input type="checkbox" id="state-OH" value="OH"><label for="state-OH">Ohio</label></div>
                            <div class="state-item"><input type="checkbox" id="state-OK" value="OK"><label for="state-OK">Oklahoma</label></div>
                            <div class="state-item"><input type="checkbox" id="state-OR" value="OR"><label for="state-OR">Oregon</label></div>
                            <div class="state-item"><input type="checkbox" id="state-PA" value="PA"><label for="state-PA">Pennsylvania</label></div>
                            <div class="state-item"><input type="checkbox" id="state-RI" value="RI"><label for="state-RI">Rhode Island</label></div>
                            <div class="state-item"><input type="checkbox" id="state-SC" value="SC"><label for="state-SC">South Carolina</label></div>
                            <div class="state-item"><input type="checkbox" id="state-SD" value="SD"><label for="state-SD">South Dakota</label></div>
                            <div class="state-item"><input type="checkbox" id="state-TN" value="TN"><label for="state-TN">Tennessee</label></div>
                            <div class="state-item"><input type="checkbox" id="state-TX" value="TX"><label for="state-TX">Texas</label></div>
                            <div class="state-item"><input type="checkbox" id="state-UT" value="UT"><label for="state-UT">Utah</label></div>
                            <div class="state-item"><input type="checkbox" id="state-VT" value="VT"><label for="state-VT">Vermont</label></div>
                            <div class="state-item"><input type="checkbox" id="state-VA" value="VA"><label for="state-VA">Virginia</label></div>
                            <div class="state-item"><input type="checkbox" id="state-WA" value="WA"><label for="state-WA">Washington</label></div>
                            <div class="state-item"><input type="checkbox" id="state-WV" value="WV"><label for="state-WV">West Virginia</label></div>
                            <div class="state-item"><input type="checkbox" id="state-WI" value="WI"><label for="state-WI">Wisconsin</label></div>
                            <div class="state-item"><input type="checkbox" id="state-WY" value="WY"><label for="state-WY">Wyoming</label></div>
                        </div>
                    </div>
                    
                    <!-- County selection (dynamic checkboxes) -->
                    <div id="countyInputGroup" style="display: none;">
                        <div id="county-loading" style="display: none; text-align: center; padding: 20px;">
                            <div style="color: #666;">Loading counties...</div>
                        </div>
                        <div id="county-checkboxes-container" style="display: none;">
                            <div class="help-text" style="margin-bottom: 10px;">
                                Select all counties where you provide services
                            </div>
                            <div id="county-checkboxes" class="checkbox-grid" style="max-height: 300px; overflow-y: auto; border: 1px solid #ddd; padding: 10px; border-radius: 5px;">
                                <!-- County checkboxes will be dynamically inserted here -->
                            </div>
                            <div style="margin-top: 10px;">
                                <span id="county-count">0 counties selected</span>
                            </div>
                        </div>
                        <div id="county-error" style="display: none; color: #e74c3c; margin-top: 10px;">
                            Unable to load counties. Please try again or contact support.
                        </div>
                    </div>
                    
                    <!-- ZIP codes input -->
                    <input type="text" id="service_zip_codes" name="service_zip_codes" placeholder="33101, 33139, 33154" style="display: none;">
                    
                    <span class="field-error"></span>
                </div>

                <div class="form-group">
                    <label for="address1">Street Address *</label>
                    <input type="text" id="address1" name="address1" required>
                    <span class="field-error"></span>
                </div>

                <div class="form-group">
                    <label for="city">City *</label>
                    <input type="text" id="city" name="city" required>
                    <span class="field-error"></span>
                </div>

                <div class="form-group">
                    <label for="state">State *</label>
                    <select id="state" name="state" required>
                        <option value="">Select State</option>
                        <option value="AL">Alabama</option>
                        <option value="AK">Alaska</option>
                        <option value="AZ">Arizona</option>
                        <option value="AR">Arkansas</option>
                        <option value="CA">California</option>
                        <option value="CO">Colorado</option>
                        <option value="CT">Connecticut</option>
                        <option value="DE">Delaware</option>
                        <option value="FL">Florida</option>
                        <option value="GA">Georgia</option>
                        <option value="HI">Hawaii</option>
                        <option value="ID">Idaho</option>
                        <option value="IL">Illinois</option>
                        <option value="IN">Indiana</option>
                        <option value="IA">Iowa</option>
                        <option value="KS">Kansas</option>
                        <option value="KY">Kentucky</option>
                        <option value="LA">Louisiana</option>
                        <option value="ME">Maine</option>
                        <option value="MD">Maryland</option>
                        <option value="MA">Massachusetts</option>
                        <option value="MI">Michigan</option>
                        <option value="MN">Minnesota</option>
                        <option value="MS">Mississippi</option>
                        <option value="MO">Missouri</option>
                        <option value="MT">Montana</option>
                        <option value="NE">Nebraska</option>
                        <option value="NV">Nevada</option>
                        <option value="NH">New Hampshire</option>
                        <option value="NJ">New Jersey</option>
                        <option value="NM">New Mexico</option>
                        <option value="NY">New York</option>
                        <option value="NC">North Carolina</option>
                        <option value="ND">North Dakota</option>
                        <option value="OH">Ohio</option>
                        <option value="OK">Oklahoma</option>
                        <option value="OR">Oregon</option>
                        <option value="PA">Pennsylvania</option>
                        <option value="RI">Rhode Island</option>
                        <option value="SC">South Carolina</option>
                        <option value="SD">South Dakota</option>
                        <option value="TN">Tennessee</option>
                        <option value="TX">Texas</option>
                        <option value="UT">Utah</option>
                        <option value="VT">Vermont</option>
                        <option value="VA">Virginia</option>
                        <option value="WA">Washington</option>
                        <option value="WV">West Virginia</option>
                        <option value="WI">Wisconsin</option>
                        <option value="WY">Wyoming</option>
                    </select>
                    <span class="field-error"></span>
                </div>

                <div class="form-group">
                    <label for="postal_code">ZIP Code *</label>
                    <input type="text" id="postal_code" name="postal_code" required>
                    <span class="field-error"></span>
                </div>

                <div class="form-group">
                    <label for="years_in_business">Years in Business</label>
                    <input type="number" id="years_in_business" name="years_in_business" min="0">
                    <span class="field-error"></span>
                </div>
            </div>

            <!-- Service Categories Section - Multi-Step Flow -->
            <div class="categories-section">
                <h3>Service Categories *</h3>
                <p>We'll guide you through selecting your service categories and specific services</p>
                
                <!-- Step 1: Primary Service Category -->
                <div id="step1-primary-category" class="step-section">
                    <h4>Step 1: Which of these choices would you say is your PRIMARY service category?</h4>
                    <div class="form-group">
                        <select id="primary_service_category" name="primary_service_category" required>
                            <option value="">Select Your Primary Category</option>
                            <option value="Boat and Yacht Repair">Boat and Yacht Repair</option>
                            <option value="Boat Maintenance">Boat Maintenance</option>
                            <option value="Marine Systems">Marine Systems</option>
                            <option value="Engines and Generators">Engines and Generators</option>
                            <option value="Boat Towing">Boat Towing</option>
                            <option value="Boater Resources">Boater Resources</option>
                            <option value="Buying or Selling a Boat">Buying or Selling a Boat</option>
                            <option value="Docks, Seawalls and Lifts">Docks, Seawalls and Lifts</option>
                            <option value="Dock and Slip Rental">Dock and Slip Rental</option>
                            <option value="Fuel Delivery">Fuel Delivery</option>
                            <option value="Boat Charters and Rentals">Boat Charters and Rentals</option>
                            <option value="Boat Hauling and Yacht Delivery">Boat Hauling and Yacht Delivery</option>
                            <option value="Maritime Education and Training">Maritime Education and Training</option>
                            <option value="Yacht Management">Yacht Management</option>
                            <option value="Waterfront Property">Waterfront Property</option>
                            <option value="Wholesale or Dealer Product Pricing">Wholesale or Dealer Product Pricing</option>
                        </select>
                        <span class="field-error"></span>
                    </div>
                </div>
                
                <!-- Step 2: Primary Category Services -->
                <div id="step2-primary-services" class="step-section" style="display: none;">
                    <h4>Step 2: Please select all of the services which you provide from this list</h4>
                    <div id="primary-services-container">
                        <!-- Primary category services will be inserted here -->
                    </div>
                    <button type="button" id="continueStep2" class="btn-small" style="margin-top: 15px;">Continue</button>
                </div>
                
                <!-- Step 3: Additional Categories -->
                <div id="step3-additional-categories" class="step-section" style="display: none;">
                    <h4>Step 3: You may select two additional categories for which you'd like to receive customer referrals from?</h4>
                    <p style="color: #666; font-size: 14px; margin-bottom: 15px;">Select 0-2 additional categories (optional)</p>
                    <div id="additional-categories-container">
                        <!-- Additional categories will be inserted here -->
                    </div>
                    <button type="button" id="continueStep3" class="btn-small" style="margin-top: 15px;">Continue</button>
                </div>
                
                <!-- Step 4: Additional Services (if any additional categories selected) -->
                <div id="step4-additional-services" class="step-section" style="display: none;">
                    <h4>Step 4: Please select all of the services from this list that you currently offer?</h4>
                    <div id="additional-services-container">
                        <!-- Additional category services will be inserted here -->
                    </div>
                    <button type="button" id="continueStep4" class="btn-small" style="margin-top: 15px;">Complete Service Selection</button>
                </div>
                
                <!-- Summary -->
                <div class="summary-section" id="selectionSummary" style="display: none;">
                    <div class="summary-title">Your Service Selection</div>
                    <div class="summary-content">
                        <div class="summary-item">
                            <div class="summary-number" id="categoryCount">0</div>
                            <div class="summary-label">Categories</div>
                        </div>
                        <div class="summary-item">
                            <div class="summary-number" id="serviceCount">0</div>
                            <div class="summary-label">Services</div>
                        </div>
                    </div>
                    <div style="margin-top: 15px; text-align: left;">
                        <div><strong>Primary:</strong> <span id="primaryCategoryDisplay"></span></div>
                        <div id="additionalCategoriesDisplay" style="margin-top: 5px;"></div>
                    </div>
                </div>
            </div>

            <!-- Additional Information -->
            <div class="form-section">
                <h3>Additional Information</h3>
                
                <div class="form-group">
                    <label for="taking_new_work">Do you have capacity to take on more work? *</label>
                    <select id="taking_new_work" name="taking_new_work" required>
                        <option value="">Please select</option>
                        <option value="Yes">Yes</option>
                        <option value="No">No</option>
                    </select>
                    <span class="field-error"></span>
                </div>
                
                <div class="form-group">
                    <label for="reviews__google_profile_url">Please share a link with some of your reviews</label>
                    <input type="url" id="reviews__google_profile_url" name="reviews__google_profile_url" placeholder="https://www.google.com/maps/place/your-business">
                    <span class="field-error"></span>
                </div>
                
                <div class="form-group">
                    <label for="vendor_preferred_contact_method">How should we contact you back? *</label>
                    <select id="vendor_preferred_contact_method" name="vendor_preferred_contact_method" required>
                        <option value="">Please select</option>
                        <option value="Email">Email</option>
                        <option value="Text">Text</option>
                        <option value="Phone call">Phone call</option>
                        <option value="Any method">Any method</option>
                    </select>
                    <span class="field-error"></span>
                </div>
                
                <div class="form-group">
                    <div style="margin-bottom: 15px;">
                        <label style="display: flex; align-items: flex-start; cursor: pointer;">
                            <input type="checkbox" id="sms_consent" name="sms_consent" required style="margin-right: 10px; margin-top: 4px; flex-shrink: 0;">
                            <span style="font-size: 14px; line-height: 1.4;">I Consent to Receive SMS Notifications, Emails and Calls from DocksidePros.com. Message Frequency May Vary. Message & Data Rates May Apply. Text HELP For Assistance. You May Reply STOP to Unsubscribe At Any Time. *</span>
                        </label>
                    </div>
                    <span class="field-error"></span>
                </div>
                
                <div class="form-group">
                    <div style="margin-bottom: 15px;">
                        <label style="display: flex; align-items: flex-start; cursor: pointer;">
                            <input type="checkbox" id="marketing_consent" name="marketing_consent" style="margin-right: 10px; margin-top: 4px; flex-shrink: 0;">
                            <span style="font-size: 14px; line-height: 1.4;">I Consent To Receive The Occasional Marketing Messages from DocksidePros.com. You May Reply STOP to Unsubscribe At Any Time.</span>
                        </label>
                    </div>
                    <span class="field-error"></span>
                </div>
                
                <div class="form-group">
                    <label for="special_requests__notes">Additional Information</label>
                    <textarea id="special_requests__notes" name="special_requests__notes" rows="4" placeholder="Tell us about your specializations, certifications, or any other relevant information"></textarea>
                </div>
            </div>

            <button type="submit" class="submit-button" id="submitButton">Submit Application</button>
        </form>
    </div>

    <script>
    (function() {
        // Service Categories Data
        const SERVICE_CATEGORIES = {
            "Boat and Yacht Repair": [
                "Fiberglass Repair",
                "Welding & Metal Fabrication", 
                "Carpentry & Woodwork",
                "Riggers & Masts",
                "Jet Ski Repair",
                "Boat Canvas and Upholstery",
                "Boat Decking and Yacht Flooring"
            ],
            "Boat Maintenance": [
                "Barnacle Cleaning",
                "Boat and Yacht Maintenance",
                "Boat Bilge Cleaning",
                "Boat Bottom Cleaning",
                "Boat Detailing",
                "Boat Oil Change",
                "Boat Wrapping and Marine Protection Film",
                "Ceramic Coating",
                "Jet Ski Maintenance",
                "Yacht Armor",
                "Yacht Fire Detection Systems"
            ],
            "Marine Systems": [
                "Marine Systems Install and Sales",
                "Yacht Stabilizers and Seakeepers",
                "Instrument Panel and Dashboard",
                "Yacht AC Sales",
                "Yacht AC Service",
                "Boat Electrical Service",
                "Boat Sound Systems",
                "Yacht Plumbing",
                "Boat Lighting",
                "Yacht Refrigeration and Watermakers"
            ],
            "Engines and Generators": [
                "Outboard Engine Service",
                "Outboard Engine Sales",
                "Inboard Engine Service",
                "Inboard Engine Sales",
                "Diesel Engine Service",
                "Diesel Engine Sales",
                "Generator Service and Repair",
                "Generator Sales"
            ],
            "Boat Towing": [
                "Get Emergency Tow",
                "Get Towing Membership"
            ],
            "Boater Resources": [
                "Yacht Wi-Fi",
                "Provisioning",
                "Boat and Yacht Parts",
                "Boat Salvage",
                "Yacht Photography",
                "Yacht Videography",
                "Yacht Crew Placement",
                "Yacht Account Management and Bookkeeping"
            ],
            "Buying or Selling a Boat": [
                "Boat Dealers",
                "Yacht Dealers",
                "Boat Surveyors",
                "Boat Financing",
                "Boat Builders",
                "Boat Brokers",
                "Yacht Brokers",
                "Yacht Builders",
                "Boat Insurance",
                "Yacht Insurance"
            ],
            "Docks, Seawalls and Lifts": [
                "Dock and Seawall Builders or Repair",
                "Boat Lift Installers",
                "Floating Dock Sales",
                "Davit and Hydraulic Platform"
            ],
            "Dock and Slip Rental": [
                "Dock and Slip Rental",
                "Rent My Dock"
            ],
            "Fuel Delivery": [
                "Fuel Delivery"
            ],
            "Boat Charters and Rentals": [
                "Boat Charters and Rentals",
                "Boat Clubs",
                "Fishing Charters",
                "Yacht and Catamaran Charters",
                "Sailboat Charters",
                "eFoil, Kiteboarding & Wing Surfing",
                "Dive Equipment and Services"
            ],
            "Boat Hauling and Yacht Delivery": [
                "Yacht Delivery",
                "Boat Hauling and Transport"
            ],
            "Maritime Education and Training": [
                "Maritime Education and Training"
            ],
            "Yacht Management": [
                "Yacht Management"
            ],
            "Waterfront Property": [
                "Waterfront Homes for Sale",
                "Sell Your Waterfront Home",
                "Waterfront New Developments"
            ],
            "Wholesale or Dealer Product Pricing": [
                "Wholesale or Dealer Product Pricing"
            ]
        };

        // Widget State
        const widgetState = {
            primaryCategory: '',
            primaryServices: new Set(),
            additionalCategories: new Set(),
            additionalServices: new Set(),
            currentSlide: 1,
            totalSlides: 6,
            formData: {},
            coverageType: '',
            debugMode: window.location.hostname === 'localhost' || window.location.search.includes('debug=true')
        };

        // Debug logger
        function debugLog(message, data = null) {
            if (widgetState.debugMode) {
                console.log(`[Vendor Widget] ${message}`, data || '');
            }
        }

        // Slide Navigation Functions
        function nextSlide(currentSlideNum) {
            debugLog(`Moving from slide ${currentSlideNum} to ${currentSlideNum + 1}`);
            
            // Validate current slide before moving
            if (!validateCurrentSlide(currentSlideNum)) {
                return;
            }
            
            // Hide current slide
            const currentSlide = document.getElementById(`slide-${currentSlideNum}`);
            currentSlide.classList.remove('active');
            
            // Show next slide
            const nextSlideNum = currentSlideNum + 1;
            const nextSlide = document.getElementById(`slide-${nextSlideNum}`);
            if (nextSlide) {
                nextSlide.classList.add('active');
                widgetState.currentSlide = nextSlideNum;
                updateProgress();
                
                // Scroll to top
                window.scrollTo(0, 0);
            }
        }

        function prevSlide(currentSlideNum) {
            debugLog(`Moving from slide ${currentSlideNum} to ${currentSlideNum - 1}`);
            
            // Hide current slide
            const currentSlide = document.getElementById(`slide-${currentSlideNum}`);
            currentSlide.classList.remove('active');
            
            // Show previous slide
            const prevSlideNum = currentSlideNum - 1;
            const prevSlide = document.getElementById(`slide-${prevSlideNum}`);
            if (prevSlide) {
                prevSlide.classList.add('active');
                widgetState.currentSlide = prevSlideNum;
                updateProgress();
                
                // Scroll to top
                window.scrollTo(0, 0);
            }
        }

        function validateCurrentSlide(slideNum) {
            let isValid = true;
            const errors = [];
            
            // Clear previous errors
            document.querySelectorAll(`#slide-${slideNum} .field-error`).forEach(error => {
                error.textContent = '';
            });
            
            switch(slideNum) {
                case 1:
                    // Validate basic info
                    const firstName = document.getElementById('firstName').value.trim();
                    const lastName = document.getElementById('lastName').value.trim();
                    const companyName = document.getElementById('vendor_company_name').value.trim();
                    
                    if (!firstName) {
                        showFieldError('firstName', 'First name is required');
                        isValid = false;
                    }
                    if (!lastName) {
                        showFieldError('lastName', 'Last name is required');
                        isValid = false;
                    }
                    if (!companyName) {
                        showFieldError('vendor_company_name', 'Company name is required');
                        isValid = false;
                    }
                    break;
                    
                case 2:
                    // Validate contact info
                    const email = document.getElementById('email').value.trim();
                    const phone = document.getElementById('phone').value.trim();
                    
                    if (!email) {
                        showFieldError('email', 'Email is required');
                        isValid = false;
                    } else if (!isValidEmail(email)) {
                        showFieldError('email', 'Please enter a valid email address');
                        isValid = false;
                    }
                    if (!phone) {
                        showFieldError('phone', 'Phone number is required');
                        isValid = false;
                    }
                    break;
                    
                case 3:
                    // Validate service categories
                    if (!widgetState.primaryCategory) {
                        showFieldError('primary_service_category', 'Please select a primary service category');
                        isValid = false;
                    }
                    if (widgetState.primaryServices.size === 0) {
                        showMessage('error', 'Please select at least one service from your primary category');
                        isValid = false;
                    }
                    break;
            }
            
            return isValid;
        }

        function showFieldError(fieldId, message) {
            const field = document.getElementById(fieldId);
            const errorSpan = field.parentNode.querySelector('.field-error');
            if (errorSpan) {
                errorSpan.textContent = message;
                field.focus();
            }
        }

        function isValidEmail(email) {
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            return emailRegex.test(email);
        }

        // Initialize Widget
        function initializeWidget() {
            debugLog('Initializing vendor survey widget');
            setupEventListeners();
            setupCoverageTypeHandling();
            updateProgress();
            loadDraft();
            debugLog('Widget initialized successfully');
        }

        // Render Primary Category Services
        function renderPrimaryServices(category) {
            const container = document.getElementById('primary-services-container');
            const services = SERVICE_CATEGORIES[category] || [];
            
            container.innerHTML = `
                <div class="service-checkbox-grid">
                    ${services.map(service => {
                        const serviceId = `primary-${service.toLowerCase().replace(/\s+/g, '-')}`;
                        return `
                            <div class="service-checkbox-item">
                                <input type="checkbox" id="${serviceId}" data-category="${category}" data-service="${service}" data-type="primary">
                                <label for="${serviceId}">${service}</label>
                            </div>
                        `;
                    }).join('')}
                </div>
            `;
        }
        
        // Render Additional Categories (excluding primary)
        function renderAdditionalCategories() {
            const container = document.getElementById('additional-categories-container');
            const excludePrimary = widgetState.primaryCategory;
            
            const availableCategories = Object.keys(SERVICE_CATEGORIES).filter(cat => cat !== excludePrimary);
            
            container.innerHTML = availableCategories.map(category => {
                const categoryId = `additional-${category.toLowerCase().replace(/\s+/g, '-')}`;
                return `
                    <div class="category-checkbox-item" data-category="${category}">
                        <input type="checkbox" id="${categoryId}" data-category="${category}" data-type="additional">
                        <label for="${categoryId}">${category}</label>
                    </div>
                `;
            }).join('');
        }
        
        // Render Additional Services
        function renderAdditionalServices() {
            const container = document.getElementById('additional-services-container');
            const additionalCategories = Array.from(widgetState.additionalCategories);
            
            if (additionalCategories.length === 0) {
                container.innerHTML = '<p>No additional categories selected.</p>';
                return;
            }
            
            let servicesHtml = '';
            additionalCategories.forEach(category => {
                const services = SERVICE_CATEGORIES[category] || [];
                servicesHtml += `
                    <div style="margin-bottom: 20px;">
                        <h5 style="color: #0066cc; margin-bottom: 10px;">${category}</h5>
                        <div class="service-checkbox-grid">
                            ${services.map(service => {
                                const serviceId = `additional-${category.toLowerCase().replace(/\s+/g, '-')}-${service.toLowerCase().replace(/\s+/g, '-')}`;
                                return `
                                    <div class="service-checkbox-item">
                                        <input type="checkbox" id="${serviceId}" data-category="${category}" data-service="${service}" data-type="additional">
                                        <label for="${serviceId}">${service}</label>
                                    </div>
                                `;
                            }).join('')}
                        </div>
                    </div>
                `;
            });
            
            container.innerHTML = servicesHtml;
        }

        // Setup Event Listeners
        function setupEventListeners() {
            // Primary category selection
            document.getElementById('primary_service_category').addEventListener('change', function(e) {
                handlePrimaryCategorySelection(e.target.value);
            });
            
            // Step navigation buttons
            document.getElementById('continueStep2').addEventListener('click', function() {
                if (validateStep2()) {
                    showStep3();
                }
            });
            
            document.getElementById('continueStep3').addEventListener('click', function() {
                showStep4();
            });
            
            document.getElementById('continueStep4').addEventListener('click', function() {
                completeServiceSelection();
            });

            // Service and category checkboxes
            document.addEventListener('change', function(e) {
                if (e.target.type === 'checkbox' && e.target.dataset.service) {
                    handleServiceSelection(e.target);
                } else if (e.target.type === 'checkbox' && e.target.dataset.type === 'additional' && !e.target.dataset.service) {
                    handleAdditionalCategorySelection(e.target);
                } else if (e.target.type === 'checkbox' && e.target.id && e.target.id.startsWith('state-')) {
                    updateStateCount();
                    updateProgress();
                }
            });
            
            // Category checkbox item click handling
            document.addEventListener('click', function(e) {
                const categoryItem = e.target.closest('.category-checkbox-item');
                if (categoryItem && e.target.type !== 'checkbox') {
                    const checkbox = categoryItem.querySelector('input[type="checkbox"]');
                    if (checkbox) {
                        checkbox.click();
                    }
                }
            });

            // Form submission
            document.getElementById('vendorSurveyForm').addEventListener('submit', handleSubmit);

            // Auto-save draft
            document.addEventListener('input', saveDraft);
            document.addEventListener('change', function(e) {
                saveDraft();
                updateProgress();
            });
        }

        // Setup Coverage Type Handling
        function setupCoverageTypeHandling() {
            const coverageTypeSelect = document.getElementById('coverage_type');
            const countyStateSelector = document.getElementById('county_state_selector');
            
            // Handle coverage type change
            coverageTypeSelect.addEventListener('change', function(e) {
                handleCoverageTypeChange(e.target.value);
            });
            
            // Handle state selection for county loading
            countyStateSelector.addEventListener('change', function(e) {
                const selectedState = e.target.value;
                if (selectedState && widgetState.coverageType === 'county') {
                    loadCountiesForState(selectedState);
                } else {
                    // Clear counties if no state selected
                    document.getElementById('county-checkboxes').innerHTML = '';
                    document.getElementById('county-checkboxes-container').style.display = 'none';
                    updateCountyCount();
                }
            });
        }

        // Handle Coverage Type Change
        function handleCoverageTypeChange(coverageType) {
            widgetState.coverageType = coverageType;
            
            // Hide all coverage inputs
            document.getElementById('service_coverage_area').style.display = 'none';
            document.getElementById('stateSelectionContainer').style.display = 'none';
            document.getElementById('countyInputGroup').style.display = 'none';
            document.getElementById('service_zip_codes').style.display = 'none';
            document.getElementById('county_state_selector').style.display = 'none';
            
            // Clear required attribute from all
            document.getElementById('service_coverage_area').removeAttribute('required');
            document.getElementById('service_zip_codes').removeAttribute('required');
            
            // Show and configure appropriate input based on coverage type
            switch(coverageType) {
                case 'global':
                case 'national':
                    document.getElementById('service_coverage_area').style.display = 'block';
                    document.getElementById('service_coverage_area').value = 'All';
                    document.getElementById('coverageAreaLabel').textContent = 'Service Coverage Area';
                    break;
                    
                case 'state':
                    document.getElementById('stateSelectionContainer').style.display = 'block';
                    document.getElementById('coverageAreaLabel').textContent = 'Select States *';
                    updateStateCount();
                    break;
                    
                case 'county':
                    document.getElementById('county_state_selector').style.display = 'block';
                    document.getElementById('countyInputGroup').style.display = 'block';
                    document.getElementById('coverageAreaLabel').textContent = 'Select State and Counties *';
                    // If state already selected, load counties
                    const currentState = document.getElementById('county_state_selector').value;
                    if (currentState) {
                        loadCountiesForState(currentState);
                    }
                    break;
                    
                case 'zip':
                    document.getElementById('service_zip_codes').style.display = 'block';
                    document.getElementById('service_zip_codes').setAttribute('required', 'required');
                    document.getElementById('coverageAreaLabel').textContent = 'Service ZIP Codes (comma-separated) *';
                    break;
            }
            
            updateProgress();
        }

        // State selection functions
        window.selectAllStates = function() {
            const checkboxes = document.querySelectorAll('.state-item input[type="checkbox"]');
            checkboxes.forEach(cb => cb.checked = true);
            updateStateCount();
            updateProgress();
            saveDraft();
        }

        window.clearAllStates = function() {
            const checkboxes = document.querySelectorAll('.state-item input[type="checkbox"]');
            checkboxes.forEach(cb => cb.checked = false);
            updateStateCount();
            updateProgress();
            saveDraft();
        }

        function updateStateCount() {
            const checkedCount = document.querySelectorAll('.state-item input[type="checkbox"]:checked').length;
            const countLabel = document.querySelector('.state-count-label');
            if (countLabel) {
                countLabel.textContent = `${checkedCount} selected`;
            }
        }
        
        // Load Counties for Selected State
        async function loadCountiesForState(stateCode) {
            const loadingDiv = document.getElementById('county-loading');
            const containerDiv = document.getElementById('county-checkboxes-container');
            const errorDiv = document.getElementById('county-error');
            const checkboxesDiv = document.getElementById('county-checkboxes');
            
            // Show loading state
            loadingDiv.style.display = 'block';
            containerDiv.style.display = 'none';
            errorDiv.style.display = 'none';
            
            try {
                // Make API call to get counties
                // const apiUrl = 'https://dockside.life/api/v1/locations/states/' + stateCode + '/counties';
                const apiUrl = 'http://localhost:8000/api/v1/locations/states/' + stateCode + '/counties'; // For local testing
                
                debugLog('Fetching counties for state:', stateCode);
                
                const response = await fetch(apiUrl, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                debugLog('Counties loaded:', data);
                console.log('API Response:', data);
                console.log('Status check:', data.status === "success");
                console.log('Counties check:', data.counties && data.counties.length > 0);
                
                if (data.status === "success" && data.counties && data.counties.length > 0) {
                    // Generate county checkboxes
                    const countiesHtml = data.counties.map(county => {
                        const countyId = `county-${stateCode}-${county.replace(/[^a-zA-Z0-9]/g, '-')}`;
                        return `
                            <div class="county-item" style="display: inline-block; width: 48%; margin: 2px;">
                                <input type="checkbox" 
                                       id="${countyId}" 
                                       name="coverage_counties[]" 
                                       value="${county}, ${stateCode}"
                                       data-county="${county}"
                                       data-state="${stateCode}"
                                       onchange="updateCountyCount()">
                                <label for="${countyId}">${county}</label>
                            </div>
                        `;
                    }).join('');
                    
                    checkboxesDiv.innerHTML = countiesHtml;
                    
                    // Show the container
                    loadingDiv.style.display = 'none';
                    containerDiv.style.display = 'block';
                    
                    updateCountyCount();
                } else {
                    throw new Error('No counties found for this state');
                }
            } catch (error) {
                console.error('Error loading counties:', error);
                debugLog('County loading error:', error.message);
                
                // Show error state
                loadingDiv.style.display = 'none';
                errorDiv.style.display = 'block';
                
                // Fallback to textarea
                checkboxesDiv.innerHTML = `
                    <textarea id="coverage_counties_fallback" 
                              name="coverage_counties" 
                              rows="3" 
                              placeholder="Enter county names separated by commas (e.g., Miami-Dade, Broward, Palm Beach)"
                              style="width: 100%;"></textarea>
                    <div class="help-text" style="margin-top: 5px;">
                        Unable to load counties automatically. Please enter them manually.
                    </div>
                `;
                containerDiv.style.display = 'block';
            }
        }
        
        // Update County Count
        function updateCountyCount() {
            const checkedCount = document.querySelectorAll('#county-checkboxes input[type="checkbox"]:checked').length;
            const countSpan = document.getElementById('county-count');
            if (countSpan) {
                countSpan.textContent = `${checkedCount} counties selected`;
            }
        }

        // Handle Primary Category Selection
        function handlePrimaryCategorySelection(category) {
            if (!category) return;
            
            widgetState.primaryCategory = category;
            renderPrimaryServices(category);
            
            // Show step 2
            document.getElementById('step2-primary-services').style.display = 'block';
            
            updateProgress();
            debugLog('Primary category selected:', category);
        }
        
        // Handle Service Selection (both primary and additional)
        function handleServiceSelection(checkbox) {
            const category = checkbox.dataset.category;
            const service = checkbox.dataset.service;
            const type = checkbox.dataset.type; // 'primary' or 'additional'
            
            if (type === 'primary') {
                if (checkbox.checked) {
                    widgetState.primaryServices.add(service);
                } else {
                    widgetState.primaryServices.delete(service);
                }
            } else if (type === 'additional') {
                if (checkbox.checked) {
                    widgetState.additionalServices.add(service);
                } else {
                    widgetState.additionalServices.delete(service);
                }
            }
            
            updateSummary();
            updateProgress();
        }
        
        // Handle Additional Category Selection
        function handleAdditionalCategorySelection(checkbox) {
            const category = checkbox.dataset.category;
            const categoryItem = checkbox.closest('.category-checkbox-item');
            
            if (checkbox.checked) {
                // Check if we already have 2 additional categories
                if (widgetState.additionalCategories.size >= 2) {
                    checkbox.checked = false;
                    alert('You can only select up to 2 additional categories.');
                    return;
                }
                widgetState.additionalCategories.add(category);
                categoryItem.classList.add('selected');
            } else {
                widgetState.additionalCategories.delete(category);
                categoryItem.classList.remove('selected');
                
                // Remove services from this category
                const servicesToRemove = [];
                widgetState.additionalServices.forEach(service => {
                    const serviceCheckbox = document.querySelector(`input[data-category="${category}"][data-service="${service}"][data-type="additional"]`);
                    if (serviceCheckbox) {
                        servicesToRemove.push(service);
                    }
                });
                servicesToRemove.forEach(service => {
                    widgetState.additionalServices.delete(service);
                });
            }
            
            updateProgress();
        }
        
        // Step Navigation Functions
        function showStep3() {
            renderAdditionalCategories();
            document.getElementById('step3-additional-categories').style.display = 'block';
            widgetState.currentStep = 3;
        }
        
        function showStep4() {
            const hasAdditionalCategories = widgetState.additionalCategories.size > 0;
            
            if (hasAdditionalCategories) {
                renderAdditionalServices();
                document.getElementById('step4-additional-services').style.display = 'block';
                widgetState.currentStep = 4;
            } else {
                // Skip step 4 if no additional categories
                completeServiceSelection();
            }
        }
        
        function completeServiceSelection() {
            updateSummary();
            updateProgress();
            
            // Show summary
            document.getElementById('selectionSummary').style.display = 'block';
            
            debugLog('Service selection completed', {
                primary: widgetState.primaryCategory,
                primaryServices: Array.from(widgetState.primaryServices),
                additional: Array.from(widgetState.additionalCategories),
                additionalServices: Array.from(widgetState.additionalServices)
            });
        }
        
        function validateStep2() {
            if (widgetState.primaryServices.size === 0) {
                alert('Please select at least one service from your primary category.');
                return false;
            }
            return true;
        }

        // Update Summary
        function updateSummary() {
            const totalCategories = widgetState.additionalCategories.size + (widgetState.primaryCategory ? 1 : 0);
            const totalServices = widgetState.primaryServices.size + widgetState.additionalServices.size;
            
            document.getElementById('categoryCount').textContent = totalCategories;
            document.getElementById('serviceCount').textContent = totalServices;
            
            // Update display text
            if (widgetState.primaryCategory) {
                document.getElementById('primaryCategoryDisplay').textContent = widgetState.primaryCategory;
            }
            
            const additionalDisplay = document.getElementById('additionalCategoriesDisplay');
            if (widgetState.additionalCategories.size > 0) {
                const additionalList = Array.from(widgetState.additionalCategories).join(', ');
                additionalDisplay.innerHTML = `<strong>Additional:</strong> ${additionalList}`;
                additionalDisplay.style.display = 'block';
            } else {
                additionalDisplay.style.display = 'none';
            }
        }

        // Update Progress Bar
        function updateProgress() {
            const currentSlide = widgetState.currentSlide;
            const totalSlides = widgetState.totalSlides;
            const percentage = Math.round((currentSlide / totalSlides) * 100);
            
            // Update top progress bar
            const progressBar = document.getElementById('progressBar');
            if (progressBar) {
                progressBar.style.width = percentage + '%';
            }
            
            // Update progress dots in all slides
            document.querySelectorAll('.form-slide').forEach((slide, index) => {
                const slideNum = index + 1;
                const dots = slide.querySelectorAll('.progress-dot');
                
                dots.forEach((dot, dotIndex) => {
                    const dotSlideNum = dotIndex + 1;
                    dot.classList.remove('active', 'completed');
                    
                    if (dotSlideNum < currentSlide) {
                        dot.classList.add('completed');
                    } else if (dotSlideNum === currentSlide) {
                        dot.classList.add('active');
                    }
                });
            });
            
            debugLog(`Progress updated: ${percentage}% (slide ${currentSlide}/${totalSlides})`);
        }
                        hasCoverageArea = document.querySelectorAll('.state-item input[type="checkbox"]:checked').length > 0;
                        break;
                    case 'county':
                        // Check for selected county checkboxes or fallback textarea
                        const countyCheckboxes = document.querySelectorAll('#county-checkboxes input[type="checkbox"]:checked').length;
                        const fallbackTextarea = document.getElementById('coverage_counties_fallback');
                        hasCoverageArea = countyCheckboxes > 0 || (fallbackTextarea && fallbackTextarea.value.trim().length > 0);
                        break;
                    case 'zip':
                        hasCoverageArea = document.getElementById('service_zip_codes').value.trim().length > 0;
                        break;
                }
            }
            
            // Check service selection completion
            const hasPrimaryCategory = widgetState.primaryCategory !== '';
            const hasPrimaryServices = widgetState.primaryServices.size > 0;
            const hasRequiredConsent = document.getElementById('sms_consent').checked;
            
            const totalSteps = requiredFields.length + 4; // +4 for coverage, primary category, services, consent
            const completedSteps = filledFields + 
                (hasCoverageArea ? 1 : 0) + 
                (hasPrimaryCategory ? 1 : 0) + 
                (hasPrimaryServices ? 1 : 0) + 
                (hasRequiredConsent ? 1 : 0);
            
            const percentage = Math.round((completedSteps / totalSteps) * 100);
            
            document.getElementById('progressBar').style.width = percentage + '%';
            document.getElementById('progressText').textContent = percentage + '% Complete';
        }

        // Validate Form
        function validateForm() {
            let isValid = true;
            const errors = [];
            
            // Clear previous errors
            document.querySelectorAll('.form-group').forEach(group => {
                group.classList.remove('has-error');
                const errorEl = group.querySelector('.field-error');
                if (errorEl) errorEl.textContent = '';
            });
            
            // Reset county state selector border if it exists
            const countyStateSelector = document.getElementById('county_state_selector');
            if (countyStateSelector) {
                countyStateSelector.style.borderColor = '';
            }
            
            // Required fields validation
            const requiredFields = [
                { id: 'firstName', label: 'First Name' },
                { id: 'lastName', label: 'Last Name' },
                { id: 'email', label: 'Email' },
                { id: 'phone', label: 'Phone' },
                { id: 'vendor_company_name', label: 'Company Name' },
                { id: 'address1', label: 'Street Address' },
                { id: 'city', label: 'City' },
                { id: 'state', label: 'State' },
                { id: 'postal_code', label: 'ZIP Code' },
                { id: 'coverage_type', label: 'Coverage Type' },
                { id: 'primary_service_category', label: 'Primary Service Category' },
                { id: 'taking_new_work', label: 'Taking New Work' },
                { id: 'vendor_preferred_contact_method', label: 'Preferred Contact Method' }
            ];
            
            requiredFields.forEach(field => {
                const input = document.getElementById(field.id);
                if (!input.value.trim()) {
                    isValid = false;
                    const formGroup = input.closest('.form-group');
                    formGroup.classList.add('has-error');
                    formGroup.querySelector('.field-error').textContent = `${field.label} is required`;
                    errors.push(`${field.label} is required`);
                }
            });
            
            // Coverage-specific validation
            const coverageType = document.getElementById('coverage_type').value;
            if (coverageType) {
                switch(coverageType) {
                    case 'state':
                        const selectedStates = document.querySelectorAll('.state-item input[type="checkbox"]:checked');
                        if (selectedStates.length === 0) {
                            isValid = false;
                            errors.push('Please select at least one state');
                            const formGroup = document.getElementById('coverageAreaGroup');
                            formGroup.classList.add('has-error');
                            formGroup.querySelector('.field-error').textContent = 'Please select at least one state';
                        }
                        break;
                        
                    case 'county':
                        // First check if state is selected
                        const stateSelected = document.getElementById('county_state_selector').value;
                        if (!stateSelected) {
                            isValid = false;
                            errors.push('Please select a state first');
                            document.getElementById('county_state_selector').style.borderColor = '#e74c3c';
                        }
                        
                        // Then check for county selection
                        const selectedCounties = document.querySelectorAll('#county-checkboxes input[type="checkbox"]:checked').length;
                        const fallbackTextarea = document.getElementById('coverage_counties_fallback');
                        const hasFallbackValue = fallbackTextarea && fallbackTextarea.value.trim().length > 0;
                        
                        if (!selectedCounties && !hasFallbackValue) {
                            isValid = false;
                            errors.push('Please select at least one county');
                            const formGroup = document.getElementById('coverageAreaGroup');
                            formGroup.classList.add('has-error');
                            formGroup.querySelector('.field-error').textContent = 'Please select at least one county';
                        }
                        break;
                        
                    case 'zip':
                        const zipCodes = document.getElementById('service_zip_codes').value.trim();
                        if (!zipCodes) {
                            isValid = false;
                            errors.push('Please enter at least one ZIP code');
                            const formGroup = document.getElementById('coverageAreaGroup');
                            formGroup.classList.add('has-error');
                            formGroup.querySelector('.field-error').textContent = 'Please enter at least one ZIP code';
                        }
                        break;
                }
            }
            
            // Email validation
            const emailInput = document.getElementById('email');
            const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
            if (emailInput.value && !emailPattern.test(emailInput.value)) {
                isValid = false;
                const formGroup = emailInput.closest('.form-group');
                formGroup.classList.add('has-error');
                formGroup.querySelector('.field-error').textContent = 'Please enter a valid email address';
                errors.push('Invalid email format');
            }
            
            // Service validation
            if (!widgetState.primaryCategory) {
                isValid = false;
                errors.push('Please select a primary service category');
            }
            
            if (widgetState.primaryServices.size === 0) {
                isValid = false;
                errors.push('Please select at least one specific service from your primary category');
            }
            
            // Consent validation
            const smsConsent = document.getElementById('sms_consent');
            if (!smsConsent.checked) {
                isValid = false;
                errors.push('Please agree to receive SMS notifications, emails and calls');
                const formGroup = smsConsent.closest('.form-group');
                formGroup.classList.add('has-error');
                formGroup.querySelector('.field-error').textContent = 'This consent is required';
            }
            
            return { isValid, errors };
        }

        // Handle Form Submission
        async function handleSubmit(e) {
            e.preventDefault();
            
            const { isValid, errors } = validateForm();
            
            if (!isValid) {
                showMessage('error', errors.join('<br>'));
                document.querySelector('.form-group.has-error input')?.focus();
                return;
            }
            
            // Collect form data
            const formData = new FormData(e.target);
            const payload = {};
            
            // Basic fields
            formData.forEach((value, key) => {
                if (key !== 'coverage_counties') { // Handle counties separately
                    payload[key] = value;
                }
            });
            
            // Add coverage data based on coverage type
            const coverageType = document.getElementById('coverage_type').value;
            payload.coverage_type = coverageType;
            
            switch(coverageType) {
                case 'global':
                case 'national':
                    payload.service_coverage_area = 'All';
                    break;
                    
                case 'state':
                    const selectedStates = Array.from(document.querySelectorAll('.state-item input[type="checkbox"]:checked'))
                        .map(cb => cb.value);
                    payload.coverage_states = selectedStates;
                    payload.service_coverage_area = selectedStates.join(', ');
                    break;
                    
                case 'county':
                    // Get counties from checkboxes or fallback textarea
                    let countyList = [];
                    
                    // First try to get from checkboxes
                    const selectedCountyCheckboxes = document.querySelectorAll('#county-checkboxes input[type="checkbox"]:checked');
                    if (selectedCountyCheckboxes.length > 0) {
                        countyList = Array.from(selectedCountyCheckboxes).map(cb => cb.value);
                    } else {
                        // Fallback to textarea if checkboxes not available
                        const fallbackTextarea = document.getElementById('coverage_counties_fallback');
                        if (fallbackTextarea && fallbackTextarea.value.trim()) {
                            const stateCode = document.getElementById('county_state_selector').value;
                            const counties = fallbackTextarea.value.split(',').map(c => c.trim()).filter(c => c);
                            
                            // Format counties with state if not already included
                            countyList = counties.map(county => {
                                if (county.includes(',')) {
                                    return county; // Already formatted
                                } else if (stateCode) {
                                    return `${county}, ${stateCode}`;
                                } else {
                                    return county;
                                }
                            });
                        }
                    }
                    
                    payload.coverage_counties = countyList;
                    payload.service_coverage_area = countyList.join('; ');
                    break;
                    
                case 'zip':
                    const zipCodes = document.getElementById('service_zip_codes').value
                        .split(',')
                        .map(zip => zip.trim())
                        .filter(zip => zip.length > 0);
                    payload.service_zip_codes = zipCodes.join(',');
                    payload.service_coverage_area = payload.service_zip_codes;
                    break;
            }
            
            // Add selected categories and services
            // Primary category (separate field for database)
            payload.primary_service_category = widgetState.primaryCategory || '';
            
            // Primary services (for webhook handler)
            payload.primary_services = Array.from(widgetState.primaryServices).join(', ');
            
            // Additional categories (for webhook handler)
            payload.additional_categories = Array.from(widgetState.additionalCategories).join(', ');
            
            // Additional services (for webhook handler)
            payload.additional_services = Array.from(widgetState.additionalServices).join(', ');
            
            // Combined categories for backward compatibility
            const allCategories = [];
            if (widgetState.primaryCategory) {
                allCategories.push(widgetState.primaryCategory);
            }
            allCategories.push(...Array.from(widgetState.additionalCategories));
            payload.service_categories = allCategories.join(', ');
            
            // Combined services for the services_provided field
            const allServices = [];
            allServices.push(...Array.from(widgetState.primaryServices));
            allServices.push(...Array.from(widgetState.additionalServices));
            payload.services_provided = allServices.join(', ');
            
            // Add consent flags
            payload.sms_consent = document.getElementById('sms_consent').checked;
            payload.marketing_consent = document.getElementById('marketing_consent').checked;
            
            // Show loading state
            const submitButton = document.getElementById('submitButton');
            submitButton.disabled = true;
            submitButton.classList.add('loading');
            submitButton.textContent = 'Submitting...';
            
            // Debug logging
            debugLog('Submitting payload:', payload);
            
            try {
                // const apiUrl = 'https://dockside.life/api/v1/webhooks/elementor/vendor_application';
                const apiUrl = 'http://localhost:8000/api/v1/webhooks/elementor/vendor_application'; // For local testing
                
                debugLog('API URL:', apiUrl);
                
                // Make API call
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                        // No API key needed - Elementor endpoints use IP whitelisting
                    },
                    body: JSON.stringify(payload)
                });
                
                debugLog('Response status:', response.status);
                
                if (response.ok) {
                    const result = await response.json();
                    debugLog('Response data:', result);
                    
                    showMessage('success', 'Application submitted successfully! We\'ll be in touch soon.');
                    clearForm();
                    clearDraft();
                    
                    // Scroll to top
                    window.scrollTo({ top: 0, behavior: 'smooth' });
                } else {
                    const errorData = await response.text();
                    debugLog('Error response:', errorData);
                    throw new Error(`Server error: ${response.status} - ${errorData}`);
                }
            } catch (error) {
                console.error('Submission error:', error);
                debugLog('Submission error:', error);
                showMessage('error', 'There was an error submitting your application. Please try again.');
            } finally {
                submitButton.disabled = false;
                submitButton.classList.remove('loading');
                submitButton.textContent = 'Submit Application';
            }
        }

        // Show Message
        function showMessage(type, text) {
            const messageEl = type === 'success' ? 
                document.getElementById('successMessage') : 
                document.getElementById('errorMessage');
            
            messageEl.innerHTML = text;
            messageEl.classList.add('show');
            
            // Auto-hide after 10 seconds
            setTimeout(() => {
                messageEl.classList.remove('show');
            }, 10000);
        }

        // Clear Form
        function clearForm() {
            document.getElementById('vendorSurveyForm').reset();
            
            // Reset widget state
            widgetState.primaryCategory = '';
            widgetState.primaryServices.clear();
            widgetState.additionalCategories.clear();
            widgetState.additionalServices.clear();
            widgetState.currentStep = 1;
            widgetState.coverageType = '';
            
            // Reset coverage type to default
            document.getElementById('coverage_type').value = '';
            handleCoverageTypeChange('');
            
            // Hide all steps except step 1
            document.getElementById('step2-primary-services').style.display = 'none';
            document.getElementById('step3-additional-categories').style.display = 'none';
            document.getElementById('step4-additional-services').style.display = 'none';
            document.getElementById('selectionSummary').style.display = 'none';
            
            // Clear multi-select options
            document.querySelectorAll('.state-item input[type="checkbox"]').forEach(cb => {
                cb.checked = false;
            });
            
            // Update state count if visible
            if (document.getElementById('stateSelectionContainer').style.display !== 'none') {
                updateStateCount();
            }
            
            // Uncheck all checkboxes
            document.querySelectorAll('input[type="checkbox"]').forEach(cb => {
                cb.checked = false;
            });
            
            // Reset category items
            document.querySelectorAll('.category-checkbox-item').forEach(item => {
                item.classList.remove('selected');
            });
            
            updateSummary();
            updateProgress();
        }

        // Save Draft to localStorage
        function saveDraft() {
            const formData = {};
            const form = document.getElementById('vendorSurveyForm');
            
            // Save form inputs
            Array.from(form.elements).forEach(element => {
                if (element.name && element.type !== 'submit') {
                    if (element.type === 'select-multiple') {
                        formData[element.name] = Array.from(element.selectedOptions).map(opt => opt.value);
                    } else {
                        formData[element.name] = element.value;
                    }
                }
            });
            
            // Save state selections separately
            if (widgetState.coverageType === 'state') {
                const selectedStates = Array.from(document.querySelectorAll('.state-item input[type="checkbox"]:checked'))
                    .map(cb => cb.value);
                formData.selectedStates = selectedStates;
            }
            
            // Save selections
            const draft = {
                formData,
                primaryCategory: widgetState.primaryCategory,
                primaryServices: Array.from(widgetState.primaryServices),
                additionalCategories: Array.from(widgetState.additionalCategories),
                additionalServices: Array.from(widgetState.additionalServices),
                currentStep: widgetState.currentStep,
                coverageType: widgetState.coverageType,
                timestamp: new Date().toISOString()
            };
            
            localStorage.setItem('vendorSurveyDraft', JSON.stringify(draft));
        }

        // Load Draft from localStorage
        function loadDraft() {
            const draftStr = localStorage.getItem('vendorSurveyDraft');
            if (!draftStr) return;
            
            try {
                const draft = JSON.parse(draftStr);
                
                // Restore form data
                Object.entries(draft.formData).forEach(([key, value]) => {
                    const element = document.getElementById(key);
                    if (element) {
                        if (element.type === 'select-multiple' && Array.isArray(value)) {
                            Array.from(element.options).forEach(option => {
                                option.selected = value.includes(option.value);
                            });
                        } else {
                            element.value = value;
                        }
                    }
                });
                
                // Restore coverage type and trigger UI update
                if (draft.formData.coverage_type) {
                    const coverageSelect = document.getElementById('coverage_type');
                    if (coverageSelect) {
                        coverageSelect.value = draft.formData.coverage_type;
                        handleCoverageTypeChange(draft.formData.coverage_type);
                    }
                }
                
                // Restore state selections if saved
                if (draft.formData.selectedStates && Array.isArray(draft.formData.selectedStates)) {
                    draft.formData.selectedStates.forEach(state => {
                        const checkbox = document.getElementById(`state-${state}`);
                        if (checkbox) {
                            checkbox.checked = true;
                        }
                    });
                    updateStateCount();
                }
                
                // Restore service selections
                if (draft.primaryCategory) {
                    widgetState.primaryCategory = draft.primaryCategory;
                    document.getElementById('primary_service_category').value = draft.primaryCategory;
                    handlePrimaryCategorySelection(draft.primaryCategory);
                }
                
                if (draft.primaryServices) {
                    draft.primaryServices.forEach(service => {
                        widgetState.primaryServices.add(service);
                        const checkbox = document.querySelector(`input[data-service="${service}"][data-type="primary"]`);
                        if (checkbox) checkbox.checked = true;
                    });
                }
                
                if (draft.additionalCategories) {
                    draft.additionalCategories.forEach(category => {
                        widgetState.additionalCategories.add(category);
                    });
                }
                
                if (draft.additionalServices) {
                    draft.additionalServices.forEach(service => {
                        widgetState.additionalServices.add(service);
                    });
                }
                
                if (draft.currentStep) {
                    widgetState.currentStep = draft.currentStep;
                    // Show appropriate steps based on saved state
                    if (draft.currentStep >= 2) showStep2();
                    if (draft.currentStep >= 3) showStep3();
                    if (draft.currentStep >= 4) showStep4();
                }
                updateSummary();
                updateProgress();
                
            } catch (error) {
                console.error('Error loading draft:', error);
            }
        }

        // Clear Draft
        function clearDraft() {
            localStorage.removeItem('vendorSurveyDraft');
        }

        // Initialize the widget when DOM is ready
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initializeWidget);
        } else {
            initializeWidget();
        }
    })();
    </script>
</body>
</html>